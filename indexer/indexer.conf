input {
    lumberjack {
        port => 5043
        ssl_certificate => "/etc/logstash/logstash.crt"
        ssl_key => "/etc/logstash/logstash.key"
        type => "logs"
        codec => json
    }
}
filter {
    if "linux-syslog" in [type] {
        grok {
            match => { "message" => "Accepted %{WORD:auth_method} for %{USER:username} from %{IP:src_ip} port %{INT:src_port} ssh2" }
            patterns_dir => ["/opt/logstash/patterns"]
        }
        grok {
            match => { "message" => "Invalid user %{USER:username} from %{IP:src_ip}" }
            patterns_dir => ["/opt/logstash/patterns"]
        }
    }
    if "kern-log" in [type] {
        grok {
            match => { "message" => "%{IPTABLES}" }
            patterns_dir => ["/opt/logstash/patterns"]
        }
    }
    if "apache-access" in [type] {
        grok {
            match => { "message" => "%{COMBINEDAPACHELOG}" }
            patterns_dir => ["/opt/logstash/patterns"]
        }
        geoip {
            database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat"
            source => "clientip"
            target => "geoip"
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
        mutate {
            convert => [ "[geoip][coordinates]", "float" ]
        }
        mutate {
            replace => [ "@source_host", "%{host}" ]
        }
        mutate {
            replace => [ "@message", "%{message}" ]
        }
        mutate {
            rename => [ "verb" , "method" ]
        }
        mutate {
            add_tag => [ "apache-access" ]
        }
        geoip {
            database => "/opt/logstash/vendor/geoip/GeoIPASNum.dat"
            source => "clientip"
            target => "geoip"
        }
        useragent {
            source => "message"
        }
    }
    if "apache-error" in [type] {
        grok {
            match => { "message" => "%{COMBINEDAPACHELOG}" }
            patterns_dir => ["/opt/logstash/patterns"]
        }
    }
}
output {
#    stdout {
#        codec => rubydebug {
#        }
#    }
    elasticsearch {
        embedded => true
        host => "127.0.0.1"
        cluster => "es-cluster"
    }
}
